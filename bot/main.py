import asyncio
from dotenv import dotenv_values # type: ignore
from aiogram import Bot, Dispatcher, F # type: ignore
from aiogram.filters import Command # type: ignore
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton # type: ignore
from aiogram.methods import DeleteMessage # type: ignore
from llm import agent

config = dotenv_values(".env")

TOKEN = config.get("BOT_TOKEN")
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è thread_id –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

async def delete_all_messages(chat_id: int, last_message_id: int):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–∏–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
    try:
        # –ë—É–¥–µ–º —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ, –Ω–∞—á–∏–Ω–∞—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞—è —Å —Ç–µ–∫—É—â–µ–≥–æ –∏ –≤—ã—à–µ (–Ω–æ–≤—ã–µ –∏–º–µ—é—Ç –±–æ–ª—å—à–∏–π message_id)
        for msg_id in range(last_message_id, last_message_id - 100, -1):
            try:
                await bot(DeleteMessage(chat_id=chat_id, message_id=msg_id))
                await asyncio.sleep(0.1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
            except:
                continue
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

@dp.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    user_data[message.from_user.id] = {
        "thread_id": f"{message.from_user.id}_{int(message.date.timestamp())}",
        "last_message_id": message.message_id
    }
    await message.answer(
        "üìö –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–Ω–∏–≥.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

@dp.message(Command("help"))
async def help_handler(message: Message) -> None:
    await message.answer(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (—Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç)\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏!"
    )

@dp.message(Command("new"))
async def new_dialog_handler(message: Message) -> None:
    thread_id = f"{message.from_user.id}_{int(message.date.timestamp())}"
    user_data[message.from_user.id] = {
        "thread_id": thread_id,
        "last_message_id": message.message_id
    }
    
    await message.answer("‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.")

@dp.message(Command("clear"))
async def clear_chat_handler(message: Message) -> None:
    user_id = message.from_user.id
    if user_id in user_data:
        last_msg_id = user_data[user_id].get("last_message_id", message.message_id)
    else:
        last_msg_id = message.message_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π
    confirm_msg = await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å —á–∞—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–¥–∞"), KeyboardButton(text="–Ω–µ—Ç")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    user_data[user_id] = user_data.get(user_id, {})
    user_data[user_id]["confirmation_msg_id"] = confirm_msg.message_id
    user_data[user_id]["last_message_id"] = last_msg_id

@dp.message(F.text.lower() == "–¥–∞")
async def confirm_clear_chat(message: Message) -> None:
    user_id = message.from_user.id
    if user_id not in user_data:
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    try:
        await bot(DeleteMessage(
            chat_id=message.chat.id,
            message_id=user_data[user_id]["confirmation_msg_id"]
        ))
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    await delete_all_messages(message.chat.id, user_data[user_id]["last_message_id"])
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
    thread_id = f"{user_id}_{int(message.date.timestamp())}"
    user_data[user_id] = {
        "thread_id": thread_id,
        "last_message_id": message.message_id
    }
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    start_msg = await message.answer(
        "–ß–∞—Ç –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.\n"
        "–ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
    )
    user_data[user_id]["last_message_id"] = start_msg.message_id

@dp.message(F.text.lower() == "–Ω–µ—Ç")
async def cancel_clear_chat(message: Message) -> None:
    user_id = message.from_user.id
    if user_id not in user_data:
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    try:
        await bot(DeleteMessage(
            chat_id=message.chat.id,
            message_id=user_data[user_id]["confirmation_msg_id"]
        ))
    except:
        pass
    
    await message.answer("–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.message(F.text)
async def handle_message(message: Message) -> None:
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    if message.text.lower() in ["/start", "/new", "/clear", "/help", "–¥–∞", "–Ω–µ—Ç"]:
        return
    
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if user_id not in user_data:
        thread_id = f"{user_id}_{int(message.date.timestamp())}"
        user_data[user_id] = {
            "thread_id": thread_id,
            "last_message_id": message.message_id
        }
        await message.answer("‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data[user_id]["last_message_id"] = message.message_id
    
    thread_id = user_data[user_id]["thread_id"]
    config = {"configurable": {"thread_id": thread_id}}
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü–µ—á–∞—Ç–∞–µ—Ç..." –∫–∞–∫ —Å—Ç–∞—Ç—É—Å
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –í—ã–∑—ã–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        resp = await asyncio.to_thread(
            agent.invoke,
            {"messages": [("user", message.text)]},
            config=config
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç –∞–≥–µ–Ω—Ç–∞
        assistant_response = resp["messages"][-1].content
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_msg = await message.answer(assistant_response)
        user_data[user_id]["last_message_id"] = sent_msg.message_id
        
    except Exception as e:
        error_msg = await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        user_data[user_id]["last_message_id"] = error_msg.message_id
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        user_data[user_id]["thread_id"] = f"{user_id}_{int(message.date.timestamp())}"

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("Bot is running...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped.")