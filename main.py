import asyncio
from dotenv import dotenv_values # type: ignore
from aiogram import Bot, Dispatcher, F # type: ignore
from aiogram.filters import Command # type: ignore
from aiogram.types import Message # type: ignore
from llm.agent_llm import agent_llm
from llm.agent_sberbank import agent_sberbank
from middleware.check_is_group import AccessMiddleware 

config_dotenv = dotenv_values(".env")

TOKEN = config_dotenv.get("BOT_TOKEN")
CORPORATE_CHAT_ID = config_dotenv.get("CORPORATE_CHAT_ID")

bot = Bot(token=TOKEN)
dp = Dispatcher()
dp.update.middleware(AccessMiddleware(CORPORATE_CHAT_ID))

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è thread_id –∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

@dp.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    user_data[message.from_user.id] = {
        "thread_id": f"{message.from_user.id}_{int(message.date.timestamp())}",
        "last_message_id": message.message_id,
        "agent_type": "default"
    }
    await message.answer(
        "üìö –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–±–æ—Ä—É –∫–Ω–∏–≥.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (–æ–±—ã—á–Ω—ã–π –∞–≥–µ–Ω—Ç)\n"
        "/sber_new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ (Sberbank –∞–≥–µ–Ω—Ç)\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
    )

@dp.message(Command("help"))
async def help_handler(message: Message) -> None:
    await message.answer(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –æ–±—ã—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º\n"
        "/sber_new - –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å Sberbank –∞–≥–µ–Ω—Ç–æ–º\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏ —è –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–Ω–∏–≥–∏!"
    )

@dp.message(Command("new"))
async def new_dialog_handler(message: Message) -> None:
    thread_id = f"{message.from_user.id}_{int(message.date.timestamp())}"
    user_data[message.from_user.id] = {
        "thread_id": thread_id,
        "last_message_id": message.message_id,
        "agent_type": "default"
    }
    
    await message.answer("‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –æ–±—ã—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥.")

@dp.message(Command("sber_new"))
async def new_sber_dialog_handler(message: Message) -> None:
    thread_id = f"{message.from_user.id}_{int(message.date.timestamp())}"
    user_data[message.from_user.id] = {
        "thread_id": thread_id,
        "last_message_id": message.message_id,
        "agent_type": "sberbank"
    }
    
    await message.answer("‚úÖ –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å Sberbank –∞–≥–µ–Ω—Ç–æ–º. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–Ω–∏–≥ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ Sberbank.")

@dp.message(F.text)
async def handle_message(message: Message) -> None:
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏
    if message.text.lower() in ["/start", "/new", "/sber_new", "/help"]:
        return
    
    user_id = message.from_user.id
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å –æ–±—ã—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
    if user_id not in user_data:
        thread_id = f"{user_id}_{int(message.date.timestamp())}"
        user_data[user_id] = {
            "thread_id": thread_id,
            "last_message_id": message.message_id,
            "agent_type": "default"
        }
        await message.answer("‚ÑπÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ —Å –æ–±—ã—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º.")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_data[user_id]["last_message_id"] = message.message_id
    
    thread_id = user_data[user_id]["thread_id"]
    config = {"configurable": {"thread_id": thread_id}}
    agent_type = user_data[user_id].get("agent_type", "default")
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º "–ü–µ—á–∞—Ç–∞–µ—Ç..." –∫–∞–∫ —Å—Ç–∞—Ç—É—Å
        await bot.send_chat_action(message.chat.id, "typing")
        
        # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞–≥–µ–Ω—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if agent_type == "sberbank":
            resp = agent_sberbank(message.text, config)
        else:
            resp = agent_llm(message.text, config)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            sent_msg = await message.answer(resp, parse_mode="Markdown")
        except:
            # –ï—Å–ª–∏ Markdown —Ä–∞–∑–º–µ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            sent_msg = await message.answer(resp)
        user_data[user_id]["last_message_id"] = sent_msg.message_id
        
    except Exception as e:
        error_msg = await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        user_data[user_id]["last_message_id"] = error_msg.message_id
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
        user_data[user_id]["thread_id"] = f"{user_id}_{int(message.date.timestamp())}"

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        print("Bot is running...")
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped.")